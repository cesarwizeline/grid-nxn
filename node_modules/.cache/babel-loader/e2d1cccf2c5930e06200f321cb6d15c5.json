{"ast":null,"code":"var _jsxFileName = \"/Users/cesar.romero/Desktop/grid-nxn/src/GridSize.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GridSize = _ref => {\n  let {\n    valueSelected,\n    gridSizeHandler\n  } = _ref;\n  console.log(valueSelected);\n  const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    onChange: e => gridSizeHandler(e.target.value),\n    children: values.map((val, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      selected: valueSelected === val && 'selected',\n      value: val,\n      children: val\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = GridSize;\nexport default GridSize;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridSize\");","map":{"version":3,"sources":["/Users/cesar.romero/Desktop/grid-nxn/src/GridSize.js"],"names":["React","GridSize","valueSelected","gridSizeHandler","console","log","values","e","target","value","map","val","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAQ,GAAG,QAAwC;AAAA,MAAvC;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAuC;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACA,QAAMI,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,CAAf;AACA,sBACE;AAAQ,IAAA,QAAQ,EAAGC,CAAD,IAAOJ,eAAe,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxC;AAAA,cACGH,MAAM,CAACI,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,kBACV;AAEE,MAAA,QAAQ,EAAEV,aAAa,KAAKS,GAAlB,IAAyB,UAFrC;AAGE,MAAA,KAAK,EAAEA,GAHT;AAAA,gBAKGA;AALH,OACOC,KADP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAhBD;;KAAMX,Q;AAkBN,eAAeA,QAAf","sourcesContent":["import React from 'react';\n\nconst GridSize = ({ valueSelected, gridSizeHandler }) => {\n  console.log(valueSelected);\n  const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  return (\n    <select onChange={(e) => gridSizeHandler(e.target.value)}>\n      {values.map((val, index) => (\n        <option\n          key={index}\n          selected={valueSelected === val && 'selected'}\n          value={val}\n        >\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default GridSize;\n"]},"metadata":{},"sourceType":"module"}